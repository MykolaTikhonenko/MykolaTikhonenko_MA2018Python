# Implementation of classic arcade game Pong

import simplegui
import random

# initialize globals - pos and vel encode vertical info for paddles
WIDTH = 600
HEIGHT = 400       
BALL_RADIUS = 20
PAD_WIDTH = 8
PAD_HEIGHT = 80
HALF_PAD_WIDTH = PAD_WIDTH / 2
HALF_PAD_HEIGHT = PAD_HEIGHT / 2
LEFT = False
RIGHT = True

ball_pos = [0, 0]
ball_vel = [0,0]

paddle1_pos = [4,200]
paddle2_pos = [596,200]
paddle1_vel = [0,1]
paddle2_vel = [0,1]

score1 = 0
score2 = 0

# initialize ball_pos and ball_vel for new bal in middle of table
# if direction is RIGHT, the ball's velocity is upper right, else upper left
def spawn_ball(direction):
    global ball_pos, ball_vel # these are vectors stored as lists
    ball_pos = [WIDTH/2, HEIGHT/2]
  
    side = random.randrange (0,2)
    if side == 0:
        ball_vel = [-1,-1]
        print ball_vel
    elif side == 1:
        ball_vel = [1,-1]
        print ball_vel
        
# define event handlers
def new_game():
    global paddle1_pos, paddle2_pos, paddle1_vel, paddle2_vel  # these are numbers
    global score1, score2  # these are ints
    spawn_ball(True)
      
def draw(canvas):
    global score1, score2, paddle1_pos, paddle2_pos, ball_pos, ball_vel
         
    # draw mid line and gutters
    canvas.draw_line([WIDTH / 2, 0],[WIDTH / 2, HEIGHT], 1, "White")
    canvas.draw_line([PAD_WIDTH, 0],[PAD_WIDTH, HEIGHT], 1, "White")
    canvas.draw_line([WIDTH - PAD_WIDTH, 0],[WIDTH - PAD_WIDTH, HEIGHT], 1, "White")
        
    # update ball
    ball_pos[0] += ball_vel[0] 
    ball_pos[1] += ball_vel[1]
    
    if ball_pos[1] <= BALL_RADIUS:
        ball_vel[1] = - ball_vel[1]
    elif ball_pos[1] >= HEIGHT - BALL_RADIUS:      
        ball_vel[1] = - ball_vel[1]
        
    elif ball_pos[0] == PAD_WIDTH + BALL_RADIUS-1:
        score1 += 1
        ball_vel = [1,-1]
        ball_pos = [WIDTH / 2, HEIGHT/2]
    elif ball_pos[0] == WIDTH - PAD_WIDTH - BALL_RADIUS+1:
        score2 += 1
        ball_vel = [-1,-1]
        ball_pos = [WIDTH / 2, HEIGHT/2]
    elif ball_pos[1] <= BALL_RADIUS:
        ball_vel[1] = - ball_vel[1]
    elif ball_pos[1] >= HEIGHT - BALL_RADIUS:
        ball_vel[1] = - ball_vel[1]
        
    # draw ball
    canvas.draw_circle(ball_pos, BALL_RADIUS, 2, "Red", "White")
   
    # draw paddles
    a1 = [0,0]
    b1 = [0,0]
    a1[0] = paddle1_pos[0]
    a1[1] = paddle1_pos[1]-HALF_PAD_HEIGHT
    b1[0] = paddle1_pos[0]
    b1[1] = paddle1_pos[1]+HALF_PAD_HEIGHT
    canvas.draw_line([a1[0],a1[1]],[b1[0],b1[1]], PAD_WIDTH+2, "White")
    
    a2 = [0,0]
    b2 = [0,0]
    a2[0] = paddle2_pos[0]
    a2[1] = paddle2_pos[1]-HALF_PAD_HEIGHT
    b2[0] = paddle2_pos[0]
    b2[1] = paddle2_pos[1]+HALF_PAD_HEIGHT 
    canvas.draw_line([a2[0],a2[1]],[b2[0],b2[1]], PAD_WIDTH+2, "White")
    
    # determine whether paddle and ball collide
    if (ball_pos[0]-BALL_RADIUS<=PAD_WIDTH)and(a1[1]<=ball_pos[1]<=b1[1]):
        ball_vel[0] = - ball_vel[0]     
        
    elif (ball_pos[0]+BALL_RADIUS>=WIDTH-PAD_WIDTH)and(a2[1]<=ball_pos[1]<=b2[1]):
        ball_vel[0] = - ball_vel[0]
            
    # draw scores
    canvas.draw_text(str(score1) ,[250, 40], 48, "Red")
    canvas.draw_text(str(score2) ,[325, 40], 48, "Red")
         
def keydown(key):
    global paddle1_vel, paddle2_vel 
    vel = 20
    if key == simplegui.KEY_MAP["w"]:     
        paddle1_vel[1] -= vel
        if paddle1_pos[1] - HALF_PAD_HEIGHT<=0:
            return
        else:
            paddle1_pos[1] += paddle1_vel[1]              
    elif key == simplegui.KEY_MAP["s"]:
        paddle1_vel[1] += vel
        if paddle1_pos[1] + HALF_PAD_HEIGHT>=HEIGHT:
            return
        else:
            paddle1_pos[1] += paddle1_vel[1]
    elif key == simplegui.KEY_MAP["down"]:
        paddle2_vel[1] += vel
        if paddle2_pos[1] + HALF_PAD_HEIGHT>=HEIGHT:
            return
        else:
            paddle2_pos[1] += paddle2_vel[1]
    elif key == simplegui.KEY_MAP["up"]:
        paddle2_vel[1] -= vel
        if paddle2_pos[1] - HALF_PAD_HEIGHT<=0:
            return
        else:
            paddle2_pos[1] += paddle2_vel[1]
    
def keyup(key):
    global paddle1_vel, paddle2_vel
    paddle1_vel[1] = 0
    paddle2_vel[1] = 0

def reset():
    global score1, score2, ball_pos
    score1 = 0
    score2 = 0
    new_game()

# create frame
frame = simplegui.create_frame("Pong", WIDTH, HEIGHT)
frame.set_draw_handler(draw)
frame.set_keydown_handler(keydown)
frame.set_keyup_handler(keyup)
frame.add_button("Reset", reset, 200)

# start frame
new_game()
frame.start()
